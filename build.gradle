buildscript {

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        // Plugin for vulnerability check:
        classpath 'org.owasp:dependency-check-gradle:5.3.0'
        // Plugin for creating fat jar (add dependencies to the jar file)
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
    }

}

plugins {
    id 'application'
    id 'com.github.ben-manes.versions' version '0.27.0'
}

repositories {
    mavenCentral()
    jcenter()
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'checkstyle'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'br.com.edudu'
version = '1.0.0'

sourceCompatibility = 11
targetCompatibility = 11

ext {
    javaMainClass = "com.edudu.Main"
}

application {
    mainClassName = javaMainClass
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.edudu.Main'
        )
    }
}

dependencies {
    // Using H2 by default.
    testImplementation group: 'com.h2database', name: 'h2', version: '1.3.148'
    // runtime 'org.postgresql:postgresql'

    // jUnit for unit testing:
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'

    // Enforce dependencies between packages.
    testImplementation 'io.github.theangrydev:domain-enforcer:1.1.1'

    // Functional programming lib.
    testImplementation 'io.vavr:vavr:1.0.0-alpha-3'

    // Telegram bot :)
    implementation'org.telegram:telegrambots:4.6'
}

wrapper {
    gradleVersion = '6.1.1'
}

// jUnit configuration:
test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }

    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

// Code quality metrics. 
// More info at: https://www.eclemma.org/jacoco/trunk/doc/check-mojo.html
jacocoTestCoverageVerification {
    violationRules {
        // Minimum test coverage percentage.
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.65
            }
        }

        // Maximum cyclomatic complexity (per method).
        rule {
            element = 'METHOD'
            limit {
                counter = 'COMPLEXITY'
                value = 'TOTALCOUNT'
                maximum = 7
            }
        }

        // Maximum cyclomatic complexity (per class).
        rule {
            element = 'CLASS'
            limit {
                counter = 'COMPLEXITY'
                value = 'TOTALCOUNT'
                maximum = 50
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification

// More info for dependencyCheck configuration at:
// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Break the build if a dangerous security problem is detected.
    failBuildOnCVSS = 1

    // Skip dependencies used on compilation time only.
    skipConfigurations = ['checkstyle']
}

jacoco {
    toolVersion = '0.8.5'
}
